#include <windows.h>
#include <wdbgexts.h>

//Decode
KDDEBUGGER_DATA64 DebuggerData = { 0 };

//Read KdDebuggerDataBlock sizeof(KDDEBUGGER_DATA64)
unsigned char KdDebuggerDataBlock[] =
{
	0x86, 0x81, 0x07, 0x24, 0x97, 0xAF, 0x4B, 0x5C, 0x86, 0x81, 0x07, 0x24, 0x97, 0xAF, 0x4B, 0x5C, 
	0x32, 0x7E, 0xF8, 0x9B, 0x98, 0xA7, 0x2A, 0x7E, 0x86, 0x8A, 0x07, 0x24, 0x97, 0xBF, 0x0B, 0x30, 
	0x83, 0x8E, 0x07, 0x24, 0x97, 0xBF, 0x0B, 0x14, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xE8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x89, 0x81, 0x07, 0x24, 0x97, 0xBF, 0xFB, 0xD7, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x8C, 0x81, 0x07, 0x24, 0x97, 0xAF, 0x2B, 0x1C, 
	0x88, 0x80, 0x07, 0x24, 0x97, 0xAF, 0x1B, 0x3C, 0x8A, 0x87, 0x07, 0x24, 0x97, 0xAF, 0xFB, 0x6C, 
	0x80, 0x81, 0x07, 0x24, 0x97, 0xAF, 0x1B, 0xAC, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x0A, 0x8C, 0x07, 0x24, 0x97, 0xAF, 0xFB, 0x7C, 
	0x87, 0x81, 0x07, 0x24, 0x97, 0xAF, 0x3B, 0xCC, 0x8D, 0x8E, 0x07, 0x24, 0x97, 0xAF, 0x2B, 0x0C, 
	0x83, 0x81, 0x07, 0x24, 0x97, 0xAF, 0x4B, 0x8C, 0x03, 0x85, 0x07, 0x24, 0x97, 0xAF, 0x2B, 0xAC, 
	0x83, 0x85, 0x07, 0x24, 0x97, 0xAF, 0x2B, 0xAC, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x0A, 0x8A, 0x07, 0x24, 0x97, 0xAF, 0xFB, 0x6C, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x87, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x0A, 0x85, 0x07, 0x24, 0x97, 0xAF, 0xFB, 0x4C, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x08, 0x80, 0x07, 0x24, 0x97, 0xAF, 0x4B, 0xEC, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x0F, 0x88, 0x07, 0x24, 0x97, 0xAF, 0x1B, 0x1C, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x87, 0x84, 0x07, 0x24, 0x97, 0xBF, 0x2B, 0x60, 
	0x07, 0x84, 0x07, 0x24, 0x97, 0xBF, 0x2B, 0x60, 0x07, 0x87, 0x07, 0x24, 0x97, 0xBF, 0x2B, 0x60, 
	0x84, 0x8C, 0x07, 0x24, 0x97, 0xAF, 0x3B, 0x3C, 0x85, 0x8C, 0x07, 0x24, 0x97, 0xAF, 0x3B, 0x3C, 
	0x02, 0x84, 0x07, 0x24, 0x97, 0xAF, 0x0B, 0xDC, 0x44, 0x8F, 0x07, 0x24, 0x97, 0xAF, 0x3B, 0x3C, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x8A, 0x82, 0x07, 0x24, 0x97, 0xAF, 0x4B, 0x3C, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x8B, 0x86, 0x07, 0x24, 0x97, 0xAF, 0xFB, 0xFC, 
	0x0C, 0x87, 0x07, 0x24, 0x97, 0xAF, 0x2B, 0x5C, 0x8C, 0x87, 0x07, 0x24, 0x97, 0xAF, 0x2B, 0x5C, 
	0x4B, 0x83, 0x07, 0x24, 0x97, 0xAF, 0x1B, 0x0C, 0x0A, 0x8F, 0x07, 0x24, 0x97, 0xAF, 0xFB, 0x6C, 
	0x0B, 0x83, 0x07, 0x24, 0x97, 0xAF, 0x1B, 0x0C, 0x8C, 0x84, 0x07, 0x24, 0x97, 0xAF, 0x2B, 0x5C, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x0A, 0x8F, 0x07, 0x24, 0x97, 0xAF, 0x4B, 0x3C, 
	0x0A, 0x81, 0x07, 0x24, 0x97, 0xAF, 0xFB, 0x7C, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x06, 0x7B, 0x78, 0xA9, 0x18, 0xDA, 0x0E, 0x15, 
	0x06, 0x71, 0xF8, 0xAB, 0x98, 0xCF, 0x4E, 0x32, 0x86, 0x7E, 0x78, 0xF9, 0x98, 0x8B, 0x0E, 0x9F, 
	0x8C, 0x7A, 0xB8, 0xAF, 0x18, 0xCF, 0xAD, 0xC8, 0x86, 0x7E, 0xB8, 0xB9, 0x98, 0x80, 0x06, 0x33, 
	0x06, 0x73, 0xF8, 0xAB, 0x98, 0x9F, 0xDE, 0xB8, 0x82, 0x84, 0x07, 0x24, 0x97, 0xAF, 0x0B, 0xDC, 
	0x04, 0x88, 0x07, 0x24, 0x97, 0xAF, 0x1B, 0x3C, 0x06, 0x87, 0x07, 0x24, 0x97, 0xAF, 0x4B, 0x5C, 
	0x8D, 0x62, 0xF8, 0xA3, 0x98, 0xDD, 0x8E, 0x3B, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0x78, 0xAA, 0x98, 0xCE, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x18, 0xDD, 0x0E, 0x39, 
	0x86, 0x7A, 0xF8, 0xAE, 0x98, 0xDD, 0x0E, 0x3E, 0x03, 0x89, 0x07, 0x24, 0x97, 0xAF, 0x4B, 0xCC, 
	0x83, 0x8E, 0x07, 0x24, 0x97, 0xAF, 0x4B, 0xCC, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x06, 0x86, 0x07, 0x24, 0x97, 0xAF, 0x1B, 0xEC, 0x8E, 0x76, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x6A, 
	0x86, 0x79, 0xF8, 0xAB, 0x18, 0xDC, 0x0E, 0x3A, 0x06, 0x7A, 0xF8, 0xEB, 0x98, 0xD4, 0x0E, 0x1A, 
	0x06, 0x2B, 0x70, 0xB6, 0x9B, 0xCE, 0xCD, 0x38, 0x86, 0x7F, 0xF8, 0x8B, 0xA8, 0xF7, 0x0E, 0x30, 
	0x86, 0x8A, 0x07, 0x94, 0x95, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 0x86, 0x7A, 0xF8, 0xAB, 0x98, 0xDF, 0x0E, 0x3A, 
	0x40, 0xED, 0xDC, 0x56, 0x00, 0xF8, 0xFF, 0xFF, 0x70, 0xF5, 0xDC, 0x56, 0x00, 0xF8, 0xFF, 0xFF, 
	0xA0, 0xB2, 0xCF, 0x56, 0x00, 0xF8, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xE0, 0x84, 0xDB, 0x56, 0x00, 0xF8, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0xCD, 0xA1, 0x56, 0x00, 0xF8, 0xFF, 0xFF, 0xA0, 0xCD, 0xA1, 0x56, 0x00, 0xF8, 0xFF, 0xFF, 
	0x88, 0xCD, 0xA1, 0x56, 0x00, 0xF8, 0xFF, 0xFF, 0x00, 0xF0, 0xD2, 0x96, 0x87, 0xD7, 0xFF, 0xFF
};

unsigned __int64 KdpDataBlockEncoded = 0xFFFFF80057650BB8;	//KdpDataBlockEncoded
unsigned __int64 KiWaitNever = 0x70ead77005d3dd74;			//[KiWaitNever]
unsigned __int64 KiWaitAlways = 0x02e9efd94056db80;			//[KiWaitAlways]

void Decode()
{
#define BitsCount(val) (sizeof(val) * CHAR_BIT)
#define Shift(val, steps) ((steps) % BitsCount(val))
#define ROL(val, steps)                                                                            \
    (((val) << Shift(val, steps)) | ((val) >> (BitsCount(val) - Shift(val, steps))))
#define BSWAP_64(x)                                                                                \
    (((unsigned __int64)(x) << 56) | (((unsigned __int64)(x) << 40) & 0xff000000000000ULL) |                       \
     (((unsigned __int64)(x) << 24) & 0xff0000000000ULL) | (((unsigned __int64)(x) << 8) & 0xff00000000ULL) |      \
     (((unsigned __int64)(x) >> 8) & 0xff000000ULL) | (((unsigned __int64)(x) >> 24) & 0xff0000ULL) |              \
     (((unsigned __int64)(x) >> 40) & 0xff00ULL) | ((unsigned __int64)(x) >> 56))

	unsigned __int64* EncodedChunks = (unsigned __int64*)KdDebuggerDataBlock;
	unsigned __int64 Nchunks = sizeof(KDDEBUGGER_DATA64) / sizeof(unsigned __int64);
	for (unsigned __int64 i = 0; i < Nchunks; ++i)
	{
		unsigned __int64 decodedChunk = EncodedChunks[i];
		decodedChunk = ROL((decodedChunk ^ KiWaitNever), (KiWaitNever & 0xFF));
		decodedChunk = decodedChunk ^ (KdpDataBlockEncoded | 0xFFFF000000000000ULL);
		decodedChunk = BSWAP_64(decodedChunk);
		decodedChunk = decodedChunk ^ KiWaitAlways;
		(reinterpret_cast<unsigned __int64*>(&DebuggerData))[i] = decodedChunk;
	}
	DebuggerData.KernBase = 0;
}

int main()
{
	auto offset = offsetof(KDDEBUGGER_DATA64, IopTriageDumpDataBlocks);
	
	Decode();
	return 0;
}